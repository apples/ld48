// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using World.Data;

namespace World.Migrations
{
    [DbContext(typeof(WorldContext))]
    [Migration("20210426065013_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("World.Data.Models.EndDayModel", b =>
                {
                    b.Property<long>("EndDayID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<short>("Day")
                        .HasColumnType("smallint");

                    b.Property<long>("PlayerID")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.HasKey("EndDayID");

                    b.HasIndex("PlayerID");

                    b.ToTable("EndDays");
                });

            modelBuilder.Entity("World.Data.Models.EventModel", b =>
                {
                    b.Property<long>("EventID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<short>("EventType")
                        .HasColumnType("smallint");

                    b.Property<int>("EventValue")
                        .HasColumnType("int");

                    b.Property<long>("PlayerID")
                        .HasColumnType("bigint");

                    b.Property<int>("TileX")
                        .HasColumnType("int");

                    b.Property<int>("TileY")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.HasKey("EventID");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("World.Data.Models.MatchedPlayer", b =>
                {
                    b.Property<long>("PlayerID")
                        .HasColumnType("bigint");

                    b.Property<long>("OtherPlayerID")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.HasKey("PlayerID", "OtherPlayerID");

                    b.ToTable("MatchedPlayers");
                });

            modelBuilder.Entity("World.Data.Models.PathModel", b =>
                {
                    b.Property<long>("PathID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<short>("Day")
                        .HasColumnType("smallint");

                    b.Property<long>("PlayerID")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<short>("WorldID")
                        .HasColumnType("smallint");

                    b.Property<short>("ZoneID")
                        .HasColumnType("smallint");

                    b.HasKey("PathID");

                    b.HasIndex("PlayerID");

                    b.ToTable("Paths");
                });

            modelBuilder.Entity("World.Data.Models.PathTileModel", b =>
                {
                    b.Property<long>("TileID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("PathID")
                        .HasColumnType("bigint");

                    b.Property<int>("TileX")
                        .HasColumnType("int");

                    b.Property<int>("TileY")
                        .HasColumnType("int");

                    b.Property<float>("TimeStamp")
                        .HasColumnType("real");

                    b.HasKey("TileID");

                    b.HasIndex("PathID");

                    b.ToTable("PathTiles");
                });

            modelBuilder.Entity("World.Data.Models.PlayerModel", b =>
                {
                    b.Property<long>("PlayerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PlayerID");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("World.Data.Models.EndDayModel", b =>
                {
                    b.HasOne("World.Data.Models.PlayerModel", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("World.Data.Models.PathModel", b =>
                {
                    b.HasOne("World.Data.Models.PlayerModel", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("World.Data.Models.PathTileModel", b =>
                {
                    b.HasOne("World.Data.Models.PathModel", "Path")
                        .WithMany("Tiles")
                        .HasForeignKey("PathID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Path");
                });

            modelBuilder.Entity("World.Data.Models.PathModel", b =>
                {
                    b.Navigation("Tiles");
                });
#pragma warning restore 612, 618
        }
    }
}
